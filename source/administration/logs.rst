.. index::
  single: logs

=============================
Logs
=============================

All logs generated by Private Chef can be found in :file:`/var/log/opscode`.
Each service enabled on a system has a sub-directory containing all of its
logs.

There are two categories of logs that are produced by Private Chef services -
Supervisor Logs and Application Logs.

.. index::
  pair: logs; supervisor logs

Supervisor Logs
---------------

These are created and managed directly by the service supervisor, and are
automatically rotated when a the current log file reaches 1,000,000 bytes. 10
log files are kept.

The latest supervisor log is always located in
:file:`/var/log/opscode/SERVICENAME/current`, and rotated logs have a filename
starting with ``@`` followed by a precise `tai64n timestamp
<http://cr.yp.to/libtai/tai64.html>`_ based on when the file was rotated.

.. index::
  pair: logs; application logs

Application Logs
----------------

These are created by the services directly, and may require you to apply the
log rotation policies that make sense for your organization and operating system.

Viewing Logs
------------

Private Chef has built-in support for easily ``tail``-ing the logs it generates. To view all the logs being generated on a Private Chef server:

.. code-block:: bash

  $ private-chef-ctl tail

To view a specific services logs:

.. code-block:: bash

  $ private-chef-ctl tail SERVICENAME

Where ``SERVICENAME`` should be replaced with the name of the service whose logs you want to view.

Services
--------

.. index::
  pair: logs; couchdb

couchdb
~~~~~~~

CouchDB only creates supervisor logs.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail couchdb

.. index::
  pair: logs; fcgiwrap

fcgiwrap
~~~~~~~~

fcgiwrap only creates supervisor logs.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail fcgiwrap

.. index::
  pair: logs; nagios

nagios
~~~~~~

Nagios creates both supervisor and administrator logs.  :file:`/var/log/opscode/nagios/nagios.log`
contains status check and notification information. These are rotated into the :file:`/var/log/opscode/nagios/archive` directory daily.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail nagios

.. index::
  pair: logs; nginx

nginx
~~~~~

Nginx creates both supervisor and administrator logs.  The administrator logs
contain both access and error logs for each virtual host utilized by Private
Chef. Each of the following logs require external log rotation.

- :file:`/var/log/opscode/nginx/access.log`:
  The Web UI and API http access logs.
- :file:`/var/log/opscode/nginx/error.log`:
  The Web UI and API http error logs.
- :file:`/var/log/opscode/nginx/internal-account.access.log`:
  The ``opscode-account`` internal load-balancer access logs.
- :file:`/var/log/opscode/nginx/internal-account.error.log`:
  The ``opscode-account`` internal load-balancer error logs.
- :file:`/var/log/opscode/nginx/internal-authz.access.log`:
  The ``opscode-authz`` internal load-balancer access logs.
- :file:`/var/log/opscode/nginx/internal-authz.error.log`:
  The ``opscode-authz`` internal load-balancer error logs.
- :file:`/var/log/opscode/nginx/internal-chef.access.log`:
  The ``opscode-chef`` and ``opscode-erchef`` internal load-balancer access logs.
- :file:`/var/log/opscode/nginx/internal-chef.error.log`:
  The ``opscode-chef`` and ``opscode-erchef`` internal load-balancer error logs.
- :file:`/var/log/opscode/nginx/nagios.access.log`:
  The ``nagios`` access logs.
- :file:`/var/log/opscode/nginx/nagios.error.log`:
  The ``nagios`` error logs.
- :file:`/var/log/opscode/nginx/rewrite-port-80.log`:
  The rewrite logs for traffic that uses HTTP instead of HTTPS.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail nginx

Reading Access Logs
###################

The nginx access log format is as follows::

  log_format opscode '$remote_addr - $remote_user [$time_local]  '
                     '"$request" $status "$request_time" $body_bytes_sent '
                     '"$http_referrer" "$http_user_agent" "$upstream_addr" '
                     '"$upstream_status" "$upstream_response_time" "$http_x_chef_version" '
                     '"$http_x_ops_sign" "$http_x_ops_userid" "$http_x_ops_timestamp" '
                     '"$http_x_ops_content_hash" $request_length';

A sample log line::

  192.168.4.1 - - [17/Feb/2012:16:02:42 -0800]  "GET /organizations/nginx/cookbooks HTTP/1.1" 200 "0.346" 12 "-" "Chef Knife/0.10.4 (ruby-1.9.3-p0; ohai-0.6.10; x86_64-darwin11.2.0; +http://opscode.com)" "127.0.0.1:9460" "200" "0.339" "0.10.4" "version=1.0" "adam" "2012-02-18T00:02:42Z" "2jmj7l5rSw0yVb/vlWAYkK/YBwk=" 871

The meaning of each field is as follows:

- ``$remote_addr``: The IP address of the client who made this request
- ``$remote_user``: The http basic auth username of this request
- ``$time_local``: The local time of the request
- ``$request``: The HTTP request
- ``$status``: The HTTP status code
- ``$request_time``: The time it took to service the request
- ``$body_bytes_sent``: The number of bytes in the HTTP response body
- ``$http_referrer``: The HTTP referrer
- ``$http_user_agent``: The user agent of the requesting client.
- ``$upstream_addr``: The upstream reverse proxy used to service this request.
- ``$upstream_status``: The upstream reverse proxy response status code.
- ``$upstream_response_time``: The upstream reverse proxy response time.
- ``$http_x_chef_version``: The version of Chef used to make this request.
- ``$http_x_ops_sign``: The version of the authentication protocol.
- ``$http_x_ops_userid``: The client name that was used to sign this request.
- ``$http_x_ops_timestamp``: The timestamp from when this request was signed.
- ``$http_x_ops_content_hash``: The hash of the contents of this request
- ``$request_length``: The length of this request

.. index::
  pair: logs; nrpe

nrpe
~~~~

nrpe only creates supervisor logs.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail nrpe

.. index::
  pair: logs; opscode-account

opscode-account
~~~~~~~~~~~~~~~

opscode-account only creates supervisor logs.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail opscode-account

.. index::
  pair: logs; opscode-authz

opscode-authz
~~~~~~~~~~~~~

opscode-authz creates supervisor logs and application logs.

- :file:`/var/log/opscode/opscode-authz/access.log.DATE`:
  Access logs for the opscode-authz service. These logs contain the date and
  hour they were written. They must be rotated externally.
- :file:`/var/log/opscode/opscode-authz/perf.log.DATE`:
  Performance logs for
  the opscode-authz service. These logs contain the date and hour they were
  written. They must be rotated externally.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail opscode-authz

.. index::
  pair: logs; opscode-certificate

opscode-certificate
~~~~~~~~~~~~~~~~~~~

opscode-certificate only creates supervisor logs.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail opscode-certificate

.. index::
  pair: logs; opscode-chef

opscode-chef
~~~~~~~~~~~~

opscode-chef only creates supervisor logs.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail opscode-chef

.. index::
  pair: logs; opscode-erchef

opscode-erchef
~~~~~~~~~~~~~~

opscode-erchef creates supervisor logs and application logs.

- :file:`/opscode-erchef/erchef.log.N`
  The access logs for opscode-erchef.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail opscode-erchef

.. index::
  pair: logs; opscode-expander

opscode-expander
~~~~~~~~~~~~~~~~

opscode-expander only creates supervisor logs.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail opscode-expander

.. index::
  pair: logs; opscode-expander-reindexer

opscode-expander-reindexer
~~~~~~~~~~~~~~~~~~~~~~~~~~

opscode-expander-reindexer only creates supervisor logs.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail opscode-expander-reindexer

.. index::
  pair: logs; opscode-org-creator

opscode-org-creator
~~~~~~~~~~~~~~~~~~~

opscode-org-creator only creates supervisor logs.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail opscode-org-creator

.. index::
  pair: logs; opscode-solr

opscode-solr
~~~~~~~~~~~~

opscode-solr only creates supervisor logs.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail opscode-solr

.. index::
  pair: logs; opscode-webui

opscode-webui
~~~~~~~~~~~~~

opscode-webui only creates supervisor logs.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail opscode-webui

.. index::
  pair: logs; phpfpm

phpfpm
~~~~~~

phpfpm only creates supervisor logs.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail phpfpm

.. index::
  pair: logs; postgresql

postgresql
~~~~~~~~~~

postresql only creates supervisor logs.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail postgresql

.. index::
  pair: logs; rabbitmq

rabbitmq
~~~~~~~~

rabbitmq only creates supervisor logs.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail rabbitmq

.. index::
  pair: logs; redis

redis
~~~~~

redis only creates supervisor logs.

To follow this services logs:

.. code-block:: bash

  $ private-chef-ctl tail redis


